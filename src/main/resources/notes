14강. Kotlin과 JPA를 함께 사용할 때 이야기거리 3가지14강. Kotlin과 JPA를 함께 사용할 때 이야기거리 3가지
--------------------------------------------------------------------------------------------------------
1. setter에 관하여
1) backing property 사용하기
 - Backing properties는 뒷받침하는 프로퍼티라는 뜻이다. 변경 가능한 프로퍼티를 외부에서 변경이 불가능하도록 막고 싶을 때, Backing properties을 사용할 수 있다.
 - 변경 가능한 값을 외부로부터 보호함으로써 유지보수성을 향상시킬 수 있다.
 - 공식 문서의 코딩 컨벤션에 따르면 Backing properties는 프로퍼티명 앞에 언더바(_)를 붙인다.
class User(
    private var _name: String
) {
    val name: String
        get() = this._name
}

2) custom setter 사용하기
class User(
    name: String
) {
    var name: name
        private set
}

위 두 방법 모두 번거롭기 때문에 setter를 열어두지만 사용하지 않는 방법을 선호
--------------------------------------------------------------------------------------------------------
2. 생성자 안의 프로퍼티, 클래스 body안의 프로퍼티
1) 모든 프로퍼티를 생성자(primary constructor)에 넣거나
2) 프로퍼티를 생성자 혹은 클래스 body 안에 구분해서 넣을 때 명확한 기준이 있거나

[클래스 body안의 프로퍼티 있는 경우]
body 안에 넣으면 단지 User를 만들때 UserLoanHistories를 바로 넣을 수 없음
User를 따로 만들고 UserLoanHistories를 세팅해주는 별도의 코드가 필요함
--------------------------------------------------------------------------------------------------------
3. JPA와 data class
- JPA Entity에는 data class를 쓰지 않는 것이 좋음(data class가 자동으로 제공하는 함수 equals, hashCode, toString과 호환성이 안좋음)
--------------------------------------------------------------------------------------------------------
4. TIP
Entity가 생성되는 로직을 찾고 싶다면 constructor 지시어를 명시적으로 작성하고 추적하자
@Entity
class User constructor( -> 생성자가 호출되는 지점 추적 가능

@Entity
class User ( -> 생성자가 호출되는 지점 추적 불가능
--------------------------------------------------------------------------------------------------------